{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nyMotor = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)\nxMotor1 = Motor(Ports.PORT9, GearSetting.RATIO_18_1, True)\nxMotor2 = Motor(Ports.PORT21, GearSetting.RATIO_18_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      Vex Maze Solver\n#\tAuthor:       Yit-Meng Chin\n# \n# ------------------------------------------\n\n# Library imports\nimport time\n\n#Variables\nwaitDelay = 0.5\nupdateDelay = 0.05\n\n#Degrees to mm\nchainLinkLen = 25.5/25\ndtmx = 12*chainLinkLen/360\ndtmy = 6*chainLinkLen/360\nmaxdtm = max(abs(dtmx), abs(dtmy))\n\n#Velocity Multipliers\n#This is for making the speed of the x and y axis the same despite different gear ratios\nvmx = abs(dtmy/maxdtm)\nvmy = abs(dtmx/maxdtm)\n\n#Motor Setup\nyMotor.spin(FORWARD)\nxMotor1.spin(FORWARD)\nxMotor2.spin(FORWARD)\n\nyMotor.set_velocity(0, PERCENT)\nxMotor1.set_velocity(0, PERCENT)\nxMotor2.set_velocity(0, PERCENT)\n\nvelo = 75\ndef movex(velocity):\n    xMotor1.set_velocity(velocity*vmx, PERCENT)\n    xMotor2.set_velocity(velocity*vmx, PERCENT)\n\ndef movey(velocity):\n    yMotor.set_velocity(velocity*vmy, PERCENT)\n\n\ndef getx():\n    return xMotor1.position(DEGREES)*dtmx\n\ndef gety():\n    return yMotor.position(DEGREES)*dtmy\n\ndef collideX():\n    return xMotor1.torque(TorqueUnits.INLB) > 5\n\ndef collideY():\n    return yMotor.torque(TorqueUnits.INLB) > 5\n\n# Homing Sequence\nmovex(-velo)\ntime.sleep(waitDelay)\nwhile abs(xMotor1.velocity(PERCENT)) <= 1:\n    time.sleep(updateDelay)\nmovex(0)\nxMotor1.set_position(0,DEGREES)\nxMotor2.set_position(0,DEGREES)\n\nmovey(-velo)\ntime.sleep(waitDelay)\nwhile abs(yMotor.velocity(PERCENT)) <= 1:\n    time.sleep(updateDelay)\nmovey(0)\nyMotor.set_position(0,DEGREES)\n\n#Find Torque Thresholds\nmovex(velo)\ntime.sleep(waitDelay)\nmaxTorque = 0\nwhile abs(xMotor1.velocity(PERCENT)) <= 1:\n    maxTorque = max(xMotor1.torque(TorqueUnits.INLB), maxTorque)\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n    brain.screen.print(\"x:\", maxTorque)\n    time.sleep(updateDelay)\nmovex(0)\n\ntime.sleep(10)\n\nmovey(velo)\ntime.sleep(waitDelay)\nmaxTorque = 0\nwhile abs(yMotor.velocity(PERCENT)) <= 1:\n    maxTorque = max(yMotor.torque(TorqueUnits.INLB), maxTorque)\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n    brain.screen.print(\"y:\", maxTorque)\n    time.sleep(updateDelay)\nmovey(0)\n\n\n# # Homing Sequence using torque\n# movex(-velo)\n# time.sleep(waitDelay)\n# while not collideX():\n#     time.sleep(updateDelay)\n# movex(0)\n# xMotor1.set_position(0,DEGREES)\n# xMotor2.set_position(0,DEGREES)\n\n# movey(-velo)\n# time.sleep(waitDelay)\n# while not collideY():\n#     time.sleep(updateDelay)\n# movey(0)\n# yMotor.set_position(0,DEGREES)","textLanguage":"python","rconfig":[{"port":[11],"name":"yMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[9],"name":"xMotor1","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[21],"name":"xMotor2","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}